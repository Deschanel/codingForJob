1. 设计的原则
	a. 开闭原则
	    可以扩展模块功能，但是不能修改模块
	b. 里氏替换原则
		子类可以扩展父类功能，但是不能改变父类原有功能，就是尽量少重写父类方法
	c. 依赖倒置原则
		高层模块不应该依赖于低层模块，应该依赖于其抽象
	d. 单一职责原则
		一个模块提供一个功能，不要大而复杂
	e. 接口隔离
		为每个类建立专用接口，而不是大而臃肿
	f. 合成复用
		软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现
		
2. UML图的关系(按关系强弱排序)
	a. 泛化--子类与父类的关系，实线+三角，三角指向父类
	b. 实现--接口与实现类的关系，虚线+三角，三角从类指向接口
	c. 组合--整体与部分关系，部分离开整体无法单独存在，实心菱形+实线+箭头，菱形在整体侧，箭头在部分侧
	d. 聚合--整体与部分关系，部分离开整体可以单独存在，空心菱形+实线+箭头，菱形在整体侧，箭头在部分侧
	e. 关联--两个有联系，实线+箭头，箭头指向被使用类，但是双向关联的话无箭头
	f. 依赖--功能的实现需要另一个类，虚线+箭头，指向被依赖的类

3. 设计模式
	a. 单例模式
	b. 简单工厂模式
		抽象产品类，多个具体产品类，一个工厂类，由这个工厂类创建多个具体产品
	c. 工厂方法模式
		抽象产品类，多个具体产品类，抽象工厂类，多个工厂类，一个工厂生产一种产品
	d. 抽象工厂模式
		抽象产品类A，抽象产品类B，多个具体产品类A，多个具体产品类B，一个抽象工厂类，每一个具体工厂可以生产A的一种产品和B的一种产品
		比如，农场工厂可以生产水果和羊；牧场工厂可以生产牧草和牛。
	e. 建造者模式--将复杂问题分割成一个个小问题，然后组装起来
		产品类，抽象建造者，具体建造者，指挥者。
		装修工人总类为抽象建造者，装修工人A可以刷屋顶、建屋顶，装修工人B可以建墙、刷墙；指挥者为工头，产品就是各个墙
		指挥者指挥建各个墙后，组装起来
	Q: 与工厂模式的区别
		建造者模式注重组装过程，工厂模式注重创建实例
	f. 代理模式
		客户端与目标对象之间加上一个代理，对目标对象的操作通过代理实现
		代理者和被代理者基于同一个基类
	g. 适配器模式
		目标接口，适配者类，适配器类，适配器把适配者类通过某些操作对外显示出目标接口的功能
	h. 装饰模式
		抽象构件，具体构件，抽象装饰，具体装饰，装饰对构件进行装饰
	i. 外观模式
		外观角色，子系统，客户角色；外观觉得为多个子系统创建统一的接口，客户角色通过外观角色去调用不同的子系统
	j. 策略模式
		抽象策略类，具体策略类，环境类；环境类种有不同的环境，每个策略算法单独形成一个模块，通过环境类去调用具体的策略